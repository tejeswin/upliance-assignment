{"ast":null,"code":"var _jsxFileName = \"I:\\\\upliance\\\\upliance-app\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  // Retrieve count from localStorage or default to 0\n  const [count, setCount] = useState(() => {\n    return Number(localStorage.getItem(\"counter\")) || 0;\n  });\n  useEffect(() => {\n    // Save count to localStorage whenever it updates\n    localStorage.setItem(\"counter\", count);\n  }, [count]);\n\n  // Animate background color based on count (Bezier-like smooth transition)\n  const bgProps = useSpring({\n    backgroundColor: `rgba(0, 150, 136, ${Math.min(count / 10, 1)})`,\n    config: {\n      tension: 120,\n      friction: 20\n    } // Bezier curve effect\n  });\n\n  // Animate number scaling effect\n  const scaleProps = useSpring({\n    transform: `scale(${1 + Math.min(count / 50, 0.2)})`,\n    config: {\n      tension: 150,\n      friction: 10\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(animated.div, {\n    style: {\n      ...bgProps,\n      padding: \"20px\",\n      textAlign: \"center\",\n      borderRadius: \"10px\",\n      boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n      marginBottom: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(animated.h1, {\n      style: {\n        fontSize: \"3rem\",\n        marginBottom: \"20px\",\n        ...scaleProps // Apply scale animation\n      },\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: buttonStyle,\n      onClick: () => setCount(count + 1),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: buttonStyle,\n      onClick: () => setCount(count - 1),\n      children: \"Decrement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: buttonStyle,\n      onClick: () => setCount(0),\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"nT48yq0qyh72kF4xI5lf1CHMr4I=\", false, function () {\n  return [useSpring, useSpring];\n});\n_c = Counter;\nconst buttonStyle = {\n  margin: \"5px\",\n  padding: \"10px 20px\",\n  borderRadius: \"5px\",\n  border: \"none\",\n  backgroundColor: \"#007BFF\",\n  color: \"#fff\",\n  cursor: \"pointer\",\n  fontSize: \"1rem\"\n};\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["React","useState","useEffect","useSpring","animated","jsxDEV","_jsxDEV","Counter","_s","count","setCount","Number","localStorage","getItem","setItem","bgProps","backgroundColor","Math","min","config","tension","friction","scaleProps","transform","div","style","padding","textAlign","borderRadius","boxShadow","marginBottom","children","h1","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","buttonStyle","onClick","_c","margin","border","color","cursor","$RefreshReg$"],"sources":["I:/upliance/upliance-app/src/components/Counter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"@react-spring/web\";\r\n\r\nconst Counter = () => {\r\n  // Retrieve count from localStorage or default to 0\r\n  const [count, setCount] = useState(() => {\r\n    return Number(localStorage.getItem(\"counter\")) || 0;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Save count to localStorage whenever it updates\r\n    localStorage.setItem(\"counter\", count);\r\n  }, [count]);\r\n\r\n  // Animate background color based on count (Bezier-like smooth transition)\r\n  const bgProps = useSpring({\r\n    backgroundColor: `rgba(0, 150, 136, ${Math.min(count / 10, 1)})`,\r\n    config: { tension: 120, friction: 20 }, // Bezier curve effect\r\n  });\r\n\r\n  // Animate number scaling effect\r\n  const scaleProps = useSpring({\r\n    transform: `scale(${1 + Math.min(count / 50, 0.2)})`,\r\n    config: { tension: 150, friction: 10 },\r\n  });\r\n\r\n  return (\r\n    <animated.div\r\n      style={{\r\n        ...bgProps,\r\n        padding: \"20px\",\r\n        textAlign: \"center\",\r\n        borderRadius: \"10px\",\r\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\r\n        marginBottom: \"20px\",\r\n      }}\r\n    >\r\n      <animated.h1\r\n        style={{\r\n          fontSize: \"3rem\",\r\n          marginBottom: \"20px\",\r\n          ...scaleProps, // Apply scale animation\r\n        }}\r\n      >\r\n        {count}\r\n      </animated.h1>\r\n      <button style={buttonStyle} onClick={() => setCount(count + 1)}>\r\n        +\r\n      </button>\r\n      <button style={buttonStyle} onClick={() => setCount(count - 1)}>\r\n        Decrement\r\n      </button>\r\n      <button style={buttonStyle} onClick={() => setCount(0)}>\r\n        Reset\r\n      </button>\r\n    </animated.div>\r\n  );\r\n};\r\n\r\nconst buttonStyle = {\r\n  margin: \"5px\",\r\n  padding: \"10px 20px\",\r\n  borderRadius: \"5px\",\r\n  border: \"none\",\r\n  backgroundColor: \"#007BFF\",\r\n  color: \"#fff\",\r\n  cursor: \"pointer\",\r\n  fontSize: \"1rem\",\r\n};\r\n\r\nexport default Counter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}